# This is a basic workflow to help you get started with Actions

name: CI/CD-deploy

# Controls when the workflow will run
on:
  # Triggers the workflow on push for the "main" branch
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # job name is "foobar"
  foobar:

    env:
      DATABASE_HOSTNAME: ${{ secrets.DATABASE_HOSTNAME }}
      DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
      DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
      PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY  }}
      HOSTNAME: ${{ secrets.EC2_HOSTNAME  }}
      USER_NAME: ${{ secrets.EC2_USERNAME  }}

    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
        #python-version: ["3.9", "3.10"]

    name: Build, push, and deploy
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
        
      - name: Checkout
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/vibrant-lighthouse:latest

      - name: Deploy to EC2 via ssh

        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh  -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
            sudo chmod +x /etc/profile.d/env-var.sh
            sudo /etc/profile.d/env-var.sh
            sudo chmod -x /etc/profile.d/env-var.sh
            cd app/src/
            git pull
            sudo -E docker-compose -f docker-compose-prod.yml up --build
          '
        # with: 
        #   host: ${{ secrets.EC2_HOSTNAME }}
        #   username: ${{ secrets.EC2_USERNAME }}
        #   key: ${{ secrets.EC2_PRIVATE_KEY }}
        #   script: |
        #     cd app/src/
        #     git pull
        #     sudo -E docker-compose -f docker-compose-prod.yml up --build

      # - name: Setup python
      #   uses: actions/setup-python@v3
      #   with:
      #     python-version: ${{ matrix.python-version }}
      #     architecture: x64
      # - name: Update pip
      #   run: python -m pip install --upgrade pip
      # - name: install all dependencies
      #   run: pip install -r requirements.txt
      # PYTEST will go here





